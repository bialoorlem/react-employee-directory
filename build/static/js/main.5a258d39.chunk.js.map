{"version":3,"sources":["logo.svg","components/Footer.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","id","Table","useState","data","setData","useEffect","axios","get","then","res","console","log","results","class","onClick","sort","a","b","name","first","sortName","dob","age","sortAge","map","employee","key","login","uuid","last","gender","email","App","className","Navbar","bg","variant","Brand","href","Nav","Form","inline","FormControl","type","placeholder","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,wICmB5BC,MAdf,WACE,OAEF,gCACE,uBAAGC,GAAG,WAAN,0B,iCCJa,SAASC,IAAS,IAAD,EACNC,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,OAEIF,mBAAS,IAFb,6BAuB5B,OAjBFG,qBAAU,WACRC,IAAMC,IAAI,wCAAwCC,MAAK,SAAAC,GACrDC,QAAQC,IAAI,MAAOF,EAAIN,KAAKS,SAC5BR,EAAQK,EAAIN,KAAKS,cAIlB,IACHF,QAAQC,IAAI,cAAeR,GAYrB,2BAAOU,MAAM,SACT,+BACI,4BACI,4BAAI,4BAAQC,QAAS,WACjBJ,QAAQC,IAAI,aAAcR,GAC1BC,EAgDpB,SAAkBD,GAYf,OARDA,EAAKY,MAAK,SAASC,EAAEC,GACjB,OAAGD,EAAEE,KAAKC,MAAQF,EAAEC,KAAKC,OACb,EAED,KAGfT,QAAQC,IAAIR,GACJ,YAAIA,GA5DciB,CAASjB,OAFrB,cAGA,yCACA,mCACA,sCACA,sCACA,4BAAI,4BAAQW,QAAS,WACjBJ,QAAQC,IAAI,cAAeR,GAC3BC,EAyBtB,SAAiBD,GAYZ,OARDA,EAAKY,MAAK,SAASC,EAAEC,GACjB,OAAGD,EAAEK,IAAIC,IAAML,EAAEI,IAAIC,KACT,EAED,KAGfZ,QAAQC,IAAIR,GACJ,YAAIA,GArCcoB,CAAQpB,OAFpB,SAKR,+BACKA,EAAKqB,KAAI,SAAAC,GAEN,OACI,wBAAIC,IAAKD,EAASE,MAAMC,MACpB,4BAAKH,EAASP,KAAKC,OACnB,4BAAKM,EAASP,KAAKW,MACnB,4BAAKJ,EAASE,MAAMC,MACpB,4BAAKH,EAASK,QACd,4BAAKL,EAASM,OACd,4BAAKN,EAASJ,IAAIC,W,kDCpB/BU,MAzBf,WACE,OACE,yBAAKC,UAAU,OACf,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QAC1B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,qCACA,kBAACC,EAAA,EAAD,CAAKN,UAAU,YAGf,kBAACO,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASX,UAAU,YACxD,kBAACY,EAAA,EAAD,CAAQT,QAAQ,gBAAhB,YAKN,kBAACnC,EAAD,MAKM,kBAAC,EAAD,QCnBc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.5a258d39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport \"../styles/Footer.css\"\n\n\n\nfunction Footer() {\n  return (\n   \n<footer>\n  <p id=\"example\">Made by Elliot Trejo</p>\n\n</footer>\n      \n    \n  );\n}\n\n\n\nexport default Footer","import React, { useState, useEffect } from \"react\";\n// import api from \"./Api\";\nimport axios from \"axios\";\n\n\nexport default function Table() {\n  const [data, setData] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  \n  \n\n  useEffect(() => {\n    axios.get(\"https://randomuser.me/api/?results=5\").then(res => {\n      console.log(\"res\", res.data.results);\n      setData(res.data.results);\n    });\n\n    //{data.map} will need this to refer to objects in the API. Will need to look at the object structure.\n  }, []);\n  console.log(\"data >>>>> \", data);\n\n\n\n  \n  \n//<button onClick={() => data.sortBy('first')} /> I will need to do something with this sort function\n  //Pulled from Jake's GitHub and modified\n  \n    return (\n\n        \n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <td><button onClick={() =>{ \n                        console.log(\"name array\", data)\n                        setData(sortName(data))}} />First Name</td>\n                    <td>Last Name</td>\n                    <td>UID</td>\n                    <td>Gender</td>\n                    <td>E-mail</td>\n                    <td><button onClick={() =>{ \n                        console.log(\"first array\", data)\n                        setData(sortAge(data))}} />Age</td>\n                </tr>\n            </thead>\n            <tbody>\n                {data.map(employee => {\n                    \n                    return (\n                        <tr key={employee.login.uuid}>\n                            <td>{employee.name.first}</td>\n                            <td>{employee.name.last}</td>\n                            <td>{employee.login.uuid}</td>\n                            <td>{employee.gender}</td>\n                            <td>{employee.email}</td>\n                            <td>{employee.dob.age}</td>\n                        </tr>\n                    )\n                }\n                )}\n            </tbody>\n        </table>\n    )\n}\n\n//Referred to Jake's GitHub but modified for my own app\n\n  function sortAge(data){\n\n      \n\n      data.sort(function(a,b){\n          if(a.dob.age < b.dob.age){\n              return -1;\n          }else{\n              return 1;\n          }\n      });\n      console.log(data)\n       return [...data]\n        \n  }\n\n    function sortName(data){\n\n      \n\n      data.sort(function(a,b){\n          if(a.name.first < b.name.first){\n              return -1;\n          }else{\n              return 1;\n          }\n      });\n      console.log(data)\n       return [...data]\n        \n  }\n\n//   function filterName(data){\n\n//       data.filter()\n\n//   }","import React from 'react';\nimport logo from './logo.svg';\nimport Footer from './components/Footer';\nimport Table from './components/Table';\n// import Api from './components/Api';\n\nimport { Form, Button, FormGroup, FormControl, ControlLabel, Navbar, Nav } from \"react-bootstrap\";\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Welcome to the Employee Directory</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-info\">Search</Button>\n    </Form>\n  </Navbar>\n\n\n<Table />\n\n\n\n\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}